{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport class TokenInterceptor {\n  constructor(auth, router, toast) {\n    this.auth = auth;\n    this.router = router;\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    const mytoken = this.auth.gettoken();\n    if (mytoken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${mytoken}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 401) {\n          this.toast.warning(\"Sesja wygasła zaloguj się ponownie\");\n          this.router.navigate(['login']);\n        }\n      }\n      return throwError(() => new Error(\"Inny błąd\"));\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;;AAMzD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAkB,EAAUC,MAAc,EAASC,KAAmB;IAAtE,SAAI,GAAJF,IAAI;IAAwB,WAAM,GAANC,MAAM;IAAiB,UAAK,GAALC,KAAK;EAAkB;EAE9FC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,OAAO,GAAG,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE;IACpC,IAAID,OAAO,EAAE;MACXF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,OAAO;QAAE;OACjD,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9BhB,UAAU,CAAEiB,GAAQ,IAAI;MACtB,IAAIA,GAAG,YAAYlB,iBAAiB,EAAE;QACxC,IAAIkB,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACtB,IAAI,CAACZ,KAAK,CAACa,OAAO,CAAE,oCAAoC,CAAE;UACxD,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;;MAGjC,OAAOnB,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC,CACC;EACH;;AAtBWnB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAoB,SAAhBpB,gBAAgB;AAAA","names":["HttpErrorResponse","catchError","throwError","TokenInterceptor","constructor","auth","router","toast","intercept","request","next","mytoken","gettoken","clone","setHeaders","Authorization","handle","pipe","err","status","warning","navigate","Error","factory"],"sourceRoot":"","sources":["C:\\Users\\JBuczek\\source\\repos\\Buczek_Gomolka_Projekt_Bazy_Danych\\Bazydanych\\ClientApp\\src\\app\\Intercepters\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\nimport { LoginService } from '../services/login.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private auth: LoginService, private router: Router,private toast:ToastrService) { }\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    const mytoken = this.auth.gettoken();\r\n    if (mytoken) {\r\n      request = request.clone({\r\n        setHeaders: { Authorization: `Bearer ${mytoken}` }\r\n      });\r\n    }\r\n    return next.handle(request).pipe(\r\n      catchError((err: any) => {\r\n        if (err instanceof HttpErrorResponse) {\r\n      if (err.status === 401) {\r\n        this.toast.warning( \"Sesja wygasła zaloguj się ponownie\" );\r\n          this.router.navigate(['login'])\r\n      }\r\n        }\r\n        return throwError(() => new Error(\"Inny błąd\"));\r\n  })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}